#!/bin/sh

set -e

. /usr/share/debconf/confmodule

_CONFFILE="/etc/default/linux-container"

case "${1}" in
	configure)
		db_get linux-container/enable
		LINUX_CONTAINER_ENABLE="${RET}" # boolean

		db_get linux-container/consoles
		LINUX_CONTAINER_CONSOLES="${RET:-6}" # string (w/o empty)

		db_get linux-container/hostname
		LINUX_CONTAINER_HOSTNAME="${RET}" # string (w/o empty)

		if [ -z "${LINUX_CONTAINER_HOSTNAME}" ]
		then
			if [ -n "$(cat /etc/hostname 2> /dev/null)" ]
			then
				LINUX_CONTAINER_HOSTNAME="$(cat /etc/hostname)"
			elif [ -x /usr/bin/lsb_release ]
			then
				LINUX_CONTAINER_HOSTNAME="$(lsb_release -is | tr [A-Z] [a-z])"
			else
				LINUX_CONTAINER_HOSTNAME="debian"
			fi
		fi

		db_get linux-container/dhcp
		LINUX_CONTAINER_DHCP="${RET}" # boolean

		if [ "${LINUX_CONTAINER_DHCP}" = "false" ]
		then
			db_get linux-container/address
			LINUX_CONTAINER_ADDRESS="${RET:-192.168.0.1}" # string (w/o empty)

			db_get linux-container/broadcast
			LINUX_CONTAINER_BROADCAST="${RET}" # string (w/ empty)

			db_get linux-container/gateway
			LINUX_CONTAINER_GATEWAY="${RET}" # string (w/ empty)

			db_get linux-container/netmask
			LINUX_CONTAINER_NETMASK="${RET:-255.255.255.0}" # string (w/o empty)

			db_get linux-container/network
			LINUX_CONTAINER_NETWORK="${RET}" # string (w/ empty)

			db_get linux-container/nameservers
			LINUX_CONTAINER_NAMESERVERS="${RET}" # string (w/ empty)
		fi

		db_stop

		if [ ! -e "${_CONFFILE}" ]
		then

			echo -n "P: Creating file ${_CONFFILE}..."

cat > "${_CONFFILE}" << EOF
# /etc/default/linux-container

LINUX_CONTAINER_ENABLE="${LINUX_CONTAINER_ENABLE}"
EOF

			echo " done."
		fi

		cp -a -f "${_CONFFILE}" "${_CONFFILE}.tmp"

		# If the admin deleted or commented some variables but then set
		# them via debconf, (re-)add them to the config file.

		echo -n "P: Updating file ${_CONFFILE}..."

		test -z "${LINUX_CONTAINER_ENABLE}" || \
		grep -Eq '^ *LINUX_CONTAINER_ENABLE=' "${_CONFFILE}" || \
		echo "LINUX_CONTAINER_ENABLE=" >> "${_CONFFILE}"

		sed -e "s|^ *LINUX_CONTAINER_ENABLE=.*|LINUX_CONTAINER_ENABLE=\"${LINUX_CONTAINER_ENABLE}\"|" \
		< "${_CONFFILE}" > "${_CONFFILE}.tmp"

		mv -f "${_CONFFILE}.tmp" "${_CONFFILE}"

		echo " done."

		if [ "${LINUX_CONTAINER_ENABLE}" != "true" ]
		then
			exit 0
		fi

		# Applying bug fixes
		if [ -x /usr/bin/lsb_release ]
		then
			_DISTRIBUTOR="$(lsb_release -is | tr [A-Z] [a-z])"
			_CODENAME="$(lsb_release -cs | tr [A-Z] [a-z])"
		else
			if [ -e /etc/progress_version ]
			then
				_DISTRIBUTOR="progress"
				_VERSION="$(cat /etc/progress_version)"

				case "${_VERSION}" in
					1.0*)
						_CODENAME="artax"
						;;

					1.9*)
						_CODENAME="artax-backports"
						;;

					2.0*)
						_CODENAME="baureo"
						;;
				esac
			elif [ -e /etc/debian_version ]
			then
				_DISTRIBUTOR="debian"

				if grep -qs sid /etc/debian_version
				then
					_CODENAME="sid"
				else
					_VERSION="$(cat /etc/debian_version)"
				fi

				case "${_VERSION}" in
					6.0*)
						_CODENAME="squeeze"
						;;

					7.0*)
						_CODENAME="wheezy"
						;;
				esac
			fi
		fi

		if ls "/usr/share/linux-container/bugs/${_DISTRIBUTOR}-${_CODENAME}"/* > /dev/null 2>&1
		then
			for _SCRIPT in "/usr/share/linux-container/bugs/${_DISTRIBUTOR}-${_CODENAME}"/*
			do
				./"${_SCRIPT}"
			done
		fi

		# squeeze only has /dev/tty and /dev/tty0 by default,
		# therefore creating missing device nodes for tty1-4.
		for _CONSOLE in $(seq 1 ${LINUX_CONTAINER_CONSOLES})
		do
			if [ ! -e "/dev/tty${_CONSOLE}" ]
			then
				echo -n "P: Creating file /dev/tty${_CONSOLE}..."

				mknod "/dev/tty${_CONSOLE}" c 4 "${_CONSOLE}"

				echo " done."
			fi
		done

		echo -n "P: Updating file /etc/inittab..."

		# Disable sulogin
		#   ~~:S:wait:/sbin/sulogin
		sed -i -e 's|\(^[^#].*S:wait:.*$\)|#\1|' /etc/inittab

		# Disable ctrlaltdel
		#   ca:12345:ctrlaltdel:/sbin/shutdown -t1 -a -r now
		sed -i -e 's|\(^[^#].*:ctrlaltdel:.*$\)|#\1|' /etc/inittab

		# Disable power
		#   pf::powerwait:/etc/init.d/powerfail start
		#   pn::powerfailnow:/etc/init.d/powerfail now
		#   po::powerokwait:/etc/init.d/powerfail stop
		sed -i -e 's|\(^[^#].*:power.*:.*$\)|#\1|' /etc/inittab

		# Disable normal getty
		#  1:2345:respawn:/sbin/getty 38400 tty1
		#  2:23:respawn:/sbin/getty 38400 tty2
		#  3:23:respawn:/sbin/getty 38400 tty3
		#  ...
		# Keep container getty
		#  1:2345:respawn:/sbin/getty 38400 console
		#  c1:23:respawn:/sbin/getty 38400 tty1
		#  c2:23:respawn:/sbin/getty 38400 tty2
		#  ...
		sed -i -e 's|\(^[^#,^c].*:respawn:/sbin/getty.*[^console,linux]$\)|#\1|' /etc/inittab

		# Enable container getty
		#  1:2345:respawn:/sbin/getty 38400 console
		#  c1:23:respawn:/sbin/getty 38400 tty1
		#  c2:23:respawn:/sbin/getty 38400 tty2

		# Assemble new entries
		_CONSOLES="\n#-- linux-container begin\n1:2345:respawn:/sbin/getty 38400 console"

		for _CONSOLE in $(seq 1 ${LINUX_CONTAINER_CONSOLES})
		do
			_CONSOLES="${_CONSOLES}\nc${_CONSOLE}:12345:respawn:/sbin/getty 38400 tty${_CONSOLE} linux"
		done

		_CONSOLES="${_CONSOLES}\n#-- linux-container end"

		# Remove old entries
		sed -e '/#-- linux-container begin/,/#-- linux-container end/d' /etc/inittab > /etc/inittab.tmp
		mv -f /etc/inittab.tmp /etc/inittab

		# Add new entries
		_CONSOLE="$(grep '#[0-9].*:respawn:/sbin/getty' /etc/inittab | tail -1)"

		sed -e "s|\(${_CONSOLE}\)|\1${_CONSOLES}|" /etc/inittab > /etc/inittab.tmp
		mv -f /etc/inittab.tmp /etc/inittab

		# disable selinux
		echo -n "P: Disabling feature selinux..."

		mkdir -p /selinux
		echo 0 > /selinux/enforce

		echo " done."

		# configure the network
		if [ "${LINUX_CONTAINER_DHCP}" = "false" ]
		then

			echo -n "P: Creating file /etc/hosts..."

cat > /etc/hosts << EOF
127.0.0.1	localhost
${LINUX_CONTAINER_ADDRESS}	${LINUX_CONTAINER_HOSTNAME}
::1		localhost ip6-localhost ip6-loopback
fe00::0		ip6-localnet
ff00::0		ip6-mcastprefix
ff02::1		ip6-allnodes
ff02::2		ip6-allrouters
EOF

			echo " done."
		fi

echo -n "P: Creating file /etc/network/interfaces..."

cat > /etc/network/interfaces << EOF
# Used by ifup(8) and ifdown(8). See the interfaces(5) manpage or
# /usr/share/doc/ifupdown/examples for more information.

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
EOF

		case "${LINUX_CONTAINER_DHCP}" in
			true)

cat >> /etc/network/interfaces << EOF
iface eth0 inet dhcp
EOF

				echo " done."
				;;

			false)

cat >> /etc/network/interfaces << EOF
iface eth0 inet static
	address ${LINUX_CONTAINER_ADDRESS}
EOF

				if [ -n "${LINUX_CONTAINER_BROADCAST}" ]
				then
					echo "	broadcast ${LINUX_CONTAINER_BROADCAST}" >> /etc/network/interfaces
				fi

				if [ -n "${LINUX_CONTAINER_GATEWAY}" ]
				then
					echo "	gateway ${LINUX_CONTAINER_GATEWAY}" >> /etc/network/interfaces
				fi

				echo "	netmask ${LINUX_CONTAINER_NETMASK}" >> /etc/network/interfaces

				if [ -n "${LINUX_CONTAINER_NETWORK}" ]
				then
					echo "	network ${LINUX_CONTAINER_NETWORK}" >> /etc/network/interfaces
				fi

				echo " done."

				if [ -n "${LINUX_CONTAINER_NAMESERVERS}" ]
				then
					echo -n "P: Creating file /etc/resolv.conf..."

					rm -f /etc/resolv.conf

					for _NAMESERVER in $(echo ${LINUX_CONTAINER_NAMESERVERS} | sed -e 's|,| |g')
					do
						echo "nameserver ${_NAMESERVER}" >> /etc/resolv.conf
					done

					echo " done."
				fi
				;;
		esac

		# set the hostname
		echo -n "P: Creating file /etc/hostname..."

		echo "${LINUX_CONTAINER_HOSTNAME}" > /etc/hostname

		echo " done."

		# remove pointless services in a container
		for _SERVICE in checkroot.sh umountfs umountroot
		do
			if [ -e "/etc/init.d/${_SERVICE}" ]
			then
				echo -n "P: Disabling service ${_SERVICE}..."

				update-rc.d -f ${_SERVICE} remove | \
					grep -v "update-rc.d: using dependency based boot sequencing" || true

				echo " done."
			fi
		done

		# The following initscripts don't provide an empty start or stop block.
		# To prevent them being enabled on upgrades, we leave a start link on
		# runlevel 3. FIXME

		for _SERVICE in hwclock.sh hwclockfirst.sh module-init-tools
		do
			if [ -e "/etc/init.d/${_SERVICE}" ]
			then
				echo -n "P: Disabling service ${_SERVICE}..."

				update-rc.d -f ${_SERVICE} remove | \
					grep -v "update-rc.d: using dependency based boot sequencing" || true

				echo " done."
			fi
		done

		# Recreating openssh-server host keys
		if [ ! -e /etc/ssh/ssh_host_rsa_key ]
		then
			echo -n "P: Creating files /etc/ssh/ssh_host_rsa_key /etc/ssh/ssh_host_rsa_key.pub..."

			ssh-keygen -q -f /etc/ssh/ssh_host_rsa_key -N "" -t rsa

			echo " done."
		fi

		if [ ! -e /etc/ssh/ssh_host_dsa_key ]
		then
			echo -n "P: Creating files /etc/ssh/ssh_host_dsa_key /etc/ssh/ssh_host_dsa_key.pub..."

			ssh-keygen -q -f /etc/ssh/ssh_host_dsa_key -N "" -t dsa

			echo " done."
		fi
		;;

	abort-upgrade|abort-remove|abort-deconfigure)

		;;

	*)
		echo "postinst called with unknown argument \`${1}'" >&2
		exit 1
		;;
esac

#DEBHELPER#

exit 0
